-- ============================================================================\r\n-- MIGRATION 005: POST-LAUNCH FIXES & OPTIMIZATIONS\r\n-- ============================================================================\r\n-- Purpose: Consolidates all post-launch patches, fixes, and performance\r\n--          enhancements into a single, idempotent migration file.\r\n-- Author: System Consolidation\r\n-- Date: 2025-07-30\r\n-- Dependencies: 004_payment_system_enhancements.sql\r\n-- ============================================================================\r\n\r\nBEGIN;\r\n\r\n-- ============================================================================\r\n-- SECTION 1: SCHEMA ENHANCEMENTS & FIXES\r\n-- ============================================================================\r\n\r\n-- 1.1: Add missing 'served_at' column to customers table\r\nALTER TABLE customers ADD COLUMN IF NOT EXISTS served_at TIMESTAMPTZ;\r\nCREATE INDEX IF NOT EXISTS idx_customers_served_at ON customers(served_at);\r\n\r\n-- 1.2: Add missing columns to queue_events table\r\nALTER TABLE queue_events ADD COLUMN IF NOT EXISTS details JSONB;\r\nALTER TABLE queue_events ADD COLUMN IF NOT EXISTS processing_start_at TIMESTAMPTZ;\r\nALTER TABLE queue_events ADD COLUMN IF NOT EXISTS processing_end_at TIMESTAMPTZ;\r\nALTER TABLE queue_events ADD COLUMN IF NOT EXISTS processing_duration_minutes NUMERIC(10,2);\r\n\r\nCREATE INDEX IF NOT EXISTS idx_queue_events_processing_start_at ON queue_events(processing_start_at);\r\nCREATE INDEX IF NOT EXISTS idx_queue_events_processing_end_at ON queue_events(processing_end_at);\r\n\r\n-- 1.3: Add missing columns to daily_queue_history table\r\nALTER TABLE daily_queue_history ADD COLUMN IF NOT EXISTS waiting_customers INTEGER DEFAULT 0;\r\nALTER TABLE daily_queue_history ADD COLUMN IF NOT EXISTS serving_customers INTEGER DEFAULT 0;\r\nALTER TABLE daily_queue_history ADD COLUMN IF NOT EXISTS processing_customers INTEGER DEFAULT 0;\r\nALTER TABLE daily_queue_history ADD COLUMN IF NOT EXISTS completed_customers INTEGER DEFAULT 0;\r\nALTER TABLE daily_queue_history ADD COLUMN IF NOT EXISTS cancelled_customers INTEGER DEFAULT 0;\r\nALTER TABLE daily_queue_history ADD COLUMN IF NOT EXISTS priority_customers INTEGER DEFAULT 0;\r\nALTER TABLE daily_queue_history ADD COLUMN IF NOT EXISTS peak_queue_length INTEGER DEFAULT 0;\r\nALTER TABLE daily_queue_history ADD COLUMN IF NOT EXISTS operating_hours NUMERIC(4,2) DEFAULT 8.0;\r\n\r\n-- ============================================================================\r\n-- SECTION 2: TRANSACTION & PAYMENT SYSTEM HARDENING\r\n-- ============================================================================\r\n\r\n-- 2.1: Convert balance_amount to a generated column for data integrity\r\nDO $$ \r\nBEGIN\r\n    -- Check if balance_amount is NOT a generated column before trying to convert it\r\n    IF NOT EXISTS (\r\n        SELECT 1 FROM information_schema.columns\r\n        WHERE table_name = 'transactions' \r\n        AND column_name = 'balance_amount'\r\n        AND generation_expression IS NOT NULL\r\n    ) THEN\r\n        ALTER TABLE transactions DROP COLUMN IF EXISTS balance_amount;\r\n        ALTER TABLE transactions ADD COLUMN balance_amount DECIMAL(10,2) \r\n            GENERATED ALWAYS AS (amount - paid_amount) STORED;\r\n        RAISE NOTICE 'Converted balance_amount to a generated column.';\r\n    ELSE\r\n        RAISE NOTICE 'balance_amount is already a generated column.';\r\n    END IF;\r\nEND $$;\r\n\r\n-- 2.2: Create optimized incremental trigger function for paid_amount\r\nCREATE OR REPLACE FUNCTION update_transaction_paid_amount()\r\nRETURNS TRIGGER AS $$\r\nDECLARE\r\n    transaction_amount DECIMAL(10,2);\r\n    new_paid_amount DECIMAL(10,2);\r\n    new_payment_status VARCHAR(20);\r\nBEGIN\r\n    SELECT amount INTO transaction_amount \r\n    FROM transactions \r\n    WHERE id = COALESCE(NEW.transaction_id, OLD.transaction_id);\r\n    \r\n    IF TG_OP = 'INSERT' THEN\r\n        UPDATE transactions SET paid_amount = paid_amount + NEW.amount WHERE id = NEW.transaction_id RETURNING paid_amount INTO new_paid_amount;\r\n    ELSIF TG_OP = 'DELETE' THEN\r\n        UPDATE transactions SET paid_amount = GREATEST(paid_amount - OLD.amount, 0) WHERE id = OLD.transaction_id RETURNING paid_amount INTO new_paid_amount;\r\n    ELSIF TG_OP = 'UPDATE' THEN\r\n        UPDATE transactions SET paid_amount = paid_amount - OLD.amount + NEW.amount WHERE id = NEW.transaction_id RETURNING paid_amount INTO new_paid_amount;\r\n    END IF;\r\n    \r\n    IF new_paid_amount = 0 THEN new_payment_status := 'unpaid';\r\n    ELSIF new_paid_amount >= transaction_amount THEN new_payment_status := 'paid';\r\n    ELSE new_payment_status := 'partial';\r\n    END IF;\r\n    \r\n    UPDATE transactions SET payment_status = new_payment_status \r\n    WHERE id = COALESCE(NEW.transaction_id, OLD.transaction_id) AND payment_status IS DISTINCT FROM new_payment_status;\r\n    \r\n    RETURN COALESCE(NEW, OLD);\r\nEND;\r\n$$ LANGUAGE plpgsql;\r\n\r\n-- 2.3: Apply optimized triggers to payment_settlements table\r\nDROP TRIGGER IF EXISTS trigger_update_payment_status ON payment_settlements;\r\nDROP TRIGGER IF EXISTS trigger_update_transaction_paid_amount_insert ON payment_settlements;\r\nCREATE TRIGGER trigger_update_transaction_paid_amount_insert\r\n    AFTER INSERT ON payment_settlements\r\n    FOR EACH ROW EXECUTE FUNCTION update_transaction_paid_amount();\r\n\r\nDROP TRIGGER IF EXISTS trigger_update_transaction_paid_amount_update ON payment_settlements;\r\nCREATE TRIGGER trigger_update_transaction_paid_amount_update\r\n    AFTER UPDATE ON payment_settlements\r\n    FOR EACH ROW EXECUTE FUNCTION update_transaction_paid_amount();\r\n\r\nDROP TRIGGER IF EXISTS trigger_update_transaction_paid_amount_delete ON payment_settlements;\r\nCREATE TRIGGER trigger_update_transaction_paid_amount_delete\r\n    AFTER DELETE ON payment_settlements\r\n    FOR EACH ROW EXECUTE FUNCTION update_transaction_paid_amount();\r\n\r\n-- 2.4: Add data integrity check constraints\r\nALTER TABLE transactions DROP CONSTRAINT IF EXISTS check_paid_amount_non_negative;\r\nALTER TABLE transactions ADD CONSTRAINT check_paid_amount_non_negative CHECK (paid_amount >= 0);\r\n\r\nALTER TABLE transactions DROP CONSTRAINT IF EXISTS check_paid_amount_not_exceeds_total;\r\n-- Allow for a small tolerance for floating point inaccuracies\r\nALTER TABLE transactions ADD CONSTRAINT check_paid_amount_not_exceeds_total CHECK (paid_amount <= amount + 0.01);\r\n\r\n-- 2.5: Add indexes for performance, especially for locking\r\nCREATE INDEX IF NOT EXISTS idx_transactions_balance_amount ON transactions(balance_amount) WHERE balance_amount > 0;\r\nCREATE INDEX IF NOT EXISTS idx_transactions_for_update ON transactions(id) WHERE payment_status != 'paid';\r\n\r\n-- ============================================================================\r\n-- SECTION 3: MIGRATION COMPLETION\r\n-- ============================================================================\r\n\r\nINSERT INTO schema_migrations (version, name, checksum, status) \r\nVALUES ('005', '005_post_launch_fixes_and_optimizations.sql', 'e5f6g7h8i9j0', 'completed')\r\nON CONFLICT (version) DO UPDATE SET \r\n    name = EXCLUDED.name,\r\n    checksum = EXCLUDED.checksum,\r\n    status = EXCLUDED.status,\r\n    applied_at = CURRENT_TIMESTAMP;\r\n\r\nCOMMIT;\r\n\r\n-- Log completion for verification\r\nSELECT 'Migration 005: Post-Launch Fixes & Optimizations - COMPLETED' as migration_status;\r\n
