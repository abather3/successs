version: '3.8'

services:
  # PostgreSQL Database - Using existing local instance
  # Commented out to use existing PostgreSQL on host
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: escashop_postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: escashop
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD_FILE: /run/secrets/db_password
  #   secrets:
  #     - db_password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./database/init:/docker-entrypoint-initdb.d
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - escashop_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d escashop"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: escashop_redis
    restart: unless-stopped
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - escashop_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: escashop_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      
      # Database Configuration - Connect to host PostgreSQL
      DB_HOST: host.docker.internal
      DB_PORT: 5432
      DB_NAME: escashop
      DB_USER: postgres
      DB_PASSWORD: postgres
      DATABASE_URL: postgresql://postgres:postgres@host.docker.internal:5432/escashop?sslmode=disable
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # JWT Configuration (using secrets)
      JWT_EXPIRES_IN: 30m
      JWT_REFRESH_EXPIRES_IN: 7d
      TOKEN_ROTATION_ENABLED: true
      
      # CORS and Frontend
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000,http://localhost}
      
      # Security Settings
      PASSWORD_MIN_LENGTH: 8
      SESSION_TIMEOUT: 600000
      
      # Rate Limiting
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      
      # Logging
      LOG_LEVEL: info
      LOG_FILE: /app/logs/app.log
      
      # Feature Flags
      ENABLE_UNIQUE_SETTLEMENT_INDEX: true
      ENABLE_SETTLEMENT_TRACING: true
      ENABLE_SETTLEMENT_MONITORING: true
      
      # Trust Proxy Settings
      TRUST_PROXY: true
      PROXY_COUNT: 1
      
    secrets:
      - db_password
      - redis_password
      - jwt_secret
      - jwt_refresh_secret
      - vonage_api_secret
      - email_password
      - google_sheets_api_key
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    ports:
      - "5000:5000"
    networks:
      - escashop_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: escashop_frontend
    restart: unless-stopped
    # Memory limits to prevent ENOMEM errors
    mem_limit: 4g
    memswap_limit: 4g
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 1G
    environment:
      NODE_ENV: production
      # Memory optimization
      NODE_OPTIONS: "--max-old-space-size=3072 --max-semi-space-size=256"
      # Internal backend URL for Docker networking
      BACKEND_URL: http://backend:5000
    ports:
      - "3000:3000"
    networks:
      - escashop_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: escashop_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./backend/logs:/var/log/escashop
    ports:
      - "80:80"
      - "443:443"
    networks:
      - escashop_network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://backend:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Docker Secrets for sensitive data
secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  jwt_refresh_secret:
    file: ./secrets/jwt_refresh_secret.txt
  vonage_api_secret:
    file: ./secrets/vonage_api_secret.txt
  email_password:
    file: ./secrets/email_password.txt
  google_sheets_api_key:
    file: ./secrets/google_sheets_api_key.txt

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network
networks:
  escashop_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
